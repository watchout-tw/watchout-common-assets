.button {
  @include appearance-button;
  cursor: pointer;
  display: inline-block;
  line-height: 1em;

  &.medium {
    font-size: 0.9375rem;
    padding: 0.625rem;
    height: 2.25rem;
  }
  &.small {
    font-size: 0.875rem;
    padding: 0.5rem;
    height: 2rem;
  }
  &.vendor {
    background-color: #F8E71C;
    color: #FF8B00;
  }
  @each $channel, $color in $watchout-colors {
    &.#{$channel} {
      background-color: $color;
    }
  }
  @each $channel, $color in $watchout-colors {
    &.#{$channel}-light {
      background-color: rgba($color, map-get($opacity-levels, light));
    }
  }
  &.toggle {
    color: $color-inactive-grey;
    background-color: $color-very-very-light-grey;
  }
  @each $channel, $color in $watchout-colors {
    &.toggle.#{$channel}.active {
      color: black;
      background-color: $color;
    }
  }
  // text color on specific background color
  &.musou {
    color: white;
  }

  &[disabled],
  &.immutable {
    box-shadow: none;
    cursor: default;
  }
  // FIXME: should this be .button.cuboid OR .button-cuboid?
  &.cuboid {
    box-shadow: none;
    &.default {
      background-color: $color-cuboid-default-light;
      @include cuboid(4px, $color-cuboid-default-darker, $color-cuboid-default, true);
    }
    &.musou {
      background-color: $color-cuboid-musou-light;
      @include cuboid(4px, $color-cuboid-musou-darker, $color-cuboid-musou, true);
    }
  }
  // FIXME: .button.simple.round OR .button-simple-round?
  &.simple.round {
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    padding: 0.25rem;
  }
  &.like.active {
    background-color: $color-like;
  }
  &.dislike.active {
    background-color: $color-dislike;
  }
  &.review {
    color: white;
    &.terrible.active {
      background-color: $color-review-terrible;
    }
    &.bad.active {
      background-color: $color-review-bad;
    }
    &.okay.active {
      background-color: $color-review-okay;
    }
    &.good.active {
      background-color: $color-review-good;
    }
    &.great.active {
      background-color: $color-review-great;
    }
  }
  &.disable, // FIXME: to be deprecated
  &.disabled {
    box-shadow: none;
    background-color: $color-disable-button-grey;
    color: $color-inactive-grey;
    filter: grayscale(1);
    cursor: default;
  }

  &.shadow-reduced {
    @include shadow-reduced
  }
}

form,
.form {
  > .field {
    position: relative;
    width: 100%;
    margin: 0.25rem 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    > .input,
    > .submit-button {
      flex-grow: 1;
      flex-basis: 0;
    }
    &.with-button {
      > .button {
        flex-basis: 3.25rem;
        margin-left: 0.5rem;
      }
    }
    &.with-extra-margin {
      margin: 0.5rem 0
    }
    &.with-label {
      padding-top: 1.25rem;
      > .field-label {
        position: absolute;
        top: 0;
        left: 0;
        font-size: 0.875rem;
        color: $color-secondary-text-grey;
      }
    }
  }
}

input[type='text'],
input[type='email'],
input[type='password'] {
  appearance: none;
  cursor: default;
  background: none;
  border: none;
  border-radius: 0;
  border-bottom: 1px $color-border-grey solid;
  line-height: $line-height-relaxed;
  padding: 0;
  margin: 0;
  width: 8rem;
  min-width: 4rem;
  max-width: none;
  &:hover {
    line-height: $line-height-relaxed;
  }

  &.full-width {
    width: 100%;
  }
}

input[type='checkbox'] {
  appearance: none;
  cursor: pointer;
  height: 1.5rem;
  width: 1.5rem;
  position: relative;
  transition: all .15s ease;
  background-color: $color-very-very-light-grey;
  border: none;
  border-radius: 50%;
  @include shadow;
  @include checkmark(8px, white);

  &:checked {
    background-color: $color-generic-grey;
  }
  &.park {
    &:checked {
      background-color: $color-park;
    }
  }
  &.ask {
    &:checked {
      background-color: $color-ask;
    }
  }
  &[disabled],
  &.immutable {
    box-shadow: none;
    cursor: default;
  }
}

.form-input-check-label {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin: 0.25rem 0;
  cursor: pointer;
  &.immutable {
    cursor: default;
  }
  > input[type='checkbox'] {
    margin-left: 0;
    margin-right: 0;
  }
  > input[type='checkbox'] + span {
    margin-left: 0.375rem;
  }
}

.form-field-many-inputs {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  margin: 0;
  > .input {
    flex-grow: 1;
    margin: 0.375rem;
  }
  > .form-input-check-label,
  > .button {
    flex-grow: 0;
  }
  &.tight {
    > .input {
      margin: 0.25rem;
    }
  }
  &.no-wrap {
    flex-wrap: nowrap;
    > .input:first-child {
      margin-left: 0;
    }
    > .input:last-child {
      margin-right: 0;
    }
  }
}
.form-field-align-center {
  display: flex;
  justify-content: center;
}
.form-field-align-right {
  display: flex;
  justify-content: flex-end;
}

.collapse {
  display: inline-block;
  padding: 0.5rem;
  font-size: 0.75rem;
  line-height: 1;
  color: $color-nice-grey;
  cursor: pointer;

  &.expand {
    @include triangleUp(12px, $color-nice-grey);
    > * {
      display: inline-block;
      vertical-align: top;
    }
  }

  &.shrink {
    @include triangleDown(12px, $color-nice-grey);
    > * {
      display: inline-block;
      vertical-align: top;
    }
  }
}
